#'ImplementaciÃ³n del grafo sin importa el peso de la arista
import math
class myGraph (object):
    def __init__(self):

        self.relations = {}
        self.isVisited = {}
        self.distance  = {}
    def __str__(self):
        return str(self.relations)
def add_node(graph, element):
    graph.relations.update({element:[]})
    graph.isVisited.update({element:[]})
    graph.isVisited[element] = 0
    graph.distance.update({element:[]})
    graph.distance[element] = math.inf

# 0 = WHITE, 1 = GRAY, 2 = BLACK
def link_both(graph, element1, element2):
    link(graph, element1, element2)
    link(graph, element2, element1)

def link(graph, origin, destination):
     graph.relations[origin].append(destination)
def restore_graph(graph):
    for element in graph.relations:
        graph.isVisited[element] = 0
        graph.distance[element] = math.inf
def BFS(graph, initialElement):
    restore_graph(graph)
    graph.isVisited[initialElement] = 1
    graph.distance[initialElement] = 0
    myQueue = []
    myQueue.append(initialElement)
    while len(myQueue) > 0 :
        node = myQueue.pop(0)
        dist = graph.distance[node]
        for element in graph.relations[node] :
            if graph.isVisited[element] == 0 :
                graph.isVisited[element] = 1
                graph.distance[element] = dist + 1
                myQueue.append(element)
        graph.isVisited[node] == 2

def DFS(graph, initialElement):
    restore_graph(graph)
    graph.isVisited[initialElement] = 1
    graph.distance[initialElement] = 0
    myQueue = []
    myQueue.append(initialElement)
    while len(myQueue) > 0 :
        node = myQueue.pop()
        dist = graph.distance[node]
        for element in graph.relations[node] :
            if graph.isVisited[element] == 0 :
                graph.isVisited[element] = 1
                graph.distance[element] = dist + 1
                myQueue.append(element)
        graph.isVisited[node] == 2


graph  = myGraph()
#E44 :V

add_node(graph, "San mateo")
add_node(graph, "Bosa")
add_node(graph, "Terreros")
add_node(graph, "Leon 13")
add_node(graph, "La despensa")
add_node(graph, "Portal del sur")
add_node(graph, "Perdomo")
add_node(graph, "Madelena")
add_node(graph, "Sevillana")
add_node(graph, "Venecia")
add_node(graph, "Alqueria")
add_node(graph, "Portal del sur")
add_node(graph, "UN")

link_both(graph, "San mateo", "Terreros")
link_both(graph, "Terreros", "Bosa")
link_both(graph, "Bosa", "Alqueria")
link_both(graph, "Alqueria","UN" )


link_both(graph, "San mateo", "Leon 13")

link_both(graph, "Leon 13", "Madelena")




DFS(graph, "San mateo")


for element in graph.relations:
    print("Distance "  + str(element  )    + "-San mateo is " + str( graph.distance[element]) )
